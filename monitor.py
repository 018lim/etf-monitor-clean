# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ELlOw6HShAE4CLoo4CqYStq60ZTWqRQU
"""

import requests

def send_telegram_alert(BOT_TOKEN, CHAT_ID, message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message
    }
    response = requests.post(url, data=payload)
    return response.json()

# 예시 사용
BOT_TOKEN = '7662548035:AAGngJn_nuMwMddV5R2PT6VOrSeu0KgSvM4'
CHAT_ID = '7885426965'

send_telegram_alert(BOT_TOKEN, CHAT_ID, "🚨 체크를 시작합니다!")

import yfinance as yf
import requests
import time
import sys

# 종목코드 : yfinance 티커 매핑
TICKERS = {
    "SOXL": "SOXL",
    "441640": "441640.KS"
}

INTERVAL_SECONDS = 60
BOT_TOKEN = '7662548035:AAGngJn_nuMwMddV5R2PT6VOrSeu0KgSvM4'
CHAT_ID = '7885426965'

def send_telegram_alert(message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message}
    response = requests.post(url, data=payload)
    print(f"[텔레그램 응답] {response.status_code} / {response.text}")

def get_return_std(ticker, months=60):
    df = yf.download(ticker, period=f"{months}mo", interval="1d")
    df['Return'] = df['Close'].pct_change()
    df = df.dropna()
    return float(df['Return'].std())

def get_prev_close_and_current_price(ticker):
    daily = yf.download(ticker, period="2d", interval="1d")
    if len(daily) < 2:
        return None, None
    prev_close = daily['Close'].iloc[-2].item()

    intraday = yf.download(ticker, period="1d", interval="1m")
    if intraday.empty:
        return None, None
    current_price = intraday['Close'].iloc[-1].item()

    return prev_close, current_price

def run_monitor():
    thresholds = {}
    notified = {code: False for code in TICKERS}

    for code, yf_ticker in TICKERS.items():
        months = 30 if code == "441640" else 60
        std = get_return_std(yf_ticker, months)
        threshold = 2 * std
        thresholds[code] = threshold
        print(f"[{code}] 기준 등락폭 (2σ): {threshold:.2%}")

    while True:
        for code, yf_ticker in TICKERS.items():
            if notified[code]:
                print(f"[{code}] ✅ 감시 완료 → 제외")
                continue

            try:
                prev_close, current_price = get_prev_close_and_current_price(yf_ticker)
                if prev_close is None or current_price is None:
                    print(f"[{code}] 가격 수신 실패")
                    continue

                change_pct = abs((current_price - prev_close) / prev_close)
                threshold = thresholds[code]

                print(f"[{code}] 현재 등락률 변화: {change_pct:.2%} / 기준: {threshold:.2%}")

                if change_pct > threshold:
                    msg = (
                        f"🚨 {code} 급등/급락 경고\n"
                        f"변화율: {change_pct:.2%} > 기준(2σ): {threshold:.2%}\n"
                        f"(현재가: {current_price:.2f}, 전일종가: {prev_close:.2f})"
                    )
                    send_telegram_alert(msg)
                    notified[code] = True

                    # ✅ 마지막 종목인지 즉시 체크하고 종료
                    if all(notified.values()):
                        print("✅ 모든 종목 감시 완료 (마지막 알림 직후). 프로그램 종료.")
                        send_telegram_alert("✅ 모든 감시 종목 알림 발송 완료. 프로그램을 종료합니다.")
                        sys.exit()

                else:
                    print(f"[{code}] 변화율 정상 범위")

            except Exception as e:
                print(f"[{code}] 오류: {e}")
                send_telegram_alert(f"❌ {code} 오류: {e}")

        time.sleep(INTERVAL_SECONDS)

try:
    run_monitor()
except SystemExit:
    pass

