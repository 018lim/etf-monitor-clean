# -*- coding: utf-8 -*-
"""monitor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ELlOw6HShAE4CLoo4CqYStq60ZTWqRQU
"""

import requests

def send_telegram_alert(BOT_TOKEN, CHAT_ID, message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message
    }
    response = requests.post(url, data=payload)
    return response.json()

# 예시 사용
BOT_TOKEN = '7662548035:AAGngJn_nuMwMddV5R2PT6VOrSeu0KgSvM4'
CHAT_ID = '7885426965'

send_telegram_alert(BOT_TOKEN, CHAT_ID, "🚨 체크를 시작합니다!")

import yfinance as yf
import requests
import time
import sys
from datetime import datetime, timedelta

# ✅ 한국 시간 (KST) 반환 함수
def get_kst_now():
    return datetime.utcnow() + timedelta(hours=9)

# 종목코드 : yfinance 티커 매핑
TICKERS = {
    "SOXL": "SOXL",
    "DGRO": "DGRO.MX"
}

INTERVAL_SECONDS = 60
BOT_TOKEN = '7662548035:AAGngJn_nuMwMddV5R2PT6VOrSeu0KgSvM4'
CHAT_ID = '7885426965'

def send_telegram_alert(message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message}
    response = requests.post(url, data=payload)
    print(f"[텔레그램 응답] {response.status_code} / {response.text}")

def get_return_std(ticker, months=60):
    df = yf.download(ticker, period=f"{months}mo", interval="1d")
    df['Return'] = df['Close'].pct_change()
    df = df.dropna()
    return float(df['Return'].std())

def get_prev_close_and_current_price(ticker):
    daily = yf.download(ticker, period="2d", interval="1d")
    if len(daily) < 2:
        return None, None
    prev_close = daily['Close'].iloc[-2].item()

    intraday = yf.download(ticker, period="1d", interval="1m")
    if intraday.empty:
        return None, None
    current_price = intraday['Close'].iloc[-1].item()

    return prev_close, current_price

def run_monitor():
    now = get_kst_now()
    if now.weekday() >= 5:  # 5: 토요일, 6: 일요일
        print("🛑 주말입니다. 감시 종료")
        send_telegram_alert("🛑 주말이라 감시 종료합니다.")
        sys.exit()

    thresholds = {}
    notified = {code: False for code in TICKERS}

    for code, yf_ticker in TICKERS.items():
        months = 30 if code == "441640" else 60
        std = get_return_std(yf_ticker, months)
        threshold = 2 * std
        thresholds[code] = threshold
        print(f"[{code}] 기준 등락폭 (2σ): {threshold:.2%}")

    while True:
        now = get_kst_now()
        #if now.hour > 6 or (now.hour == 6 and now.minute >= 30):
        # ✅ 오후 3시 30분 이후 종료
        if now.hour > 6 :
            print("⏹️ 감시 종료: 오후 3시 30분 도달 (KST)")
            send_telegram_alert("⏹️ 감시 종료: 오후 3시 30분이 되었습니다 (KST).")
            sys.exit()

        for code, yf_ticker in TICKERS.items():
            if notified[code]:
                print(f"[{code}] ✅ 감시 완료 → 제외")
                continue

            try:
                prev_close, current_price = get_prev_close_and_current_price(yf_ticker)
                if prev_close is None or current_price is None:
                    print(f"[{code}] 가격 수신 실패")
                    continue

                change_pct = abs((current_price - prev_close) / prev_close)
                threshold = thresholds[code]

                print(f"[{code}] 현재 등락률 변화: {change_pct:.2%} / 기준: {threshold:.2%}")

                if change_pct > threshold:
                    msg = (
                        f"🚨 {code} 급등/급